# This is a basic workflow to help you get started with Actions

name: CI

on: [push, workflow_dispatch]
    
jobs:
  build:
    runs-on: macos-latest
    strategy:
     matrix:
       api: [1-28, 2-29, 3-30, 4-30, 5-30]

    steps:
    - uses: actions/checkout@v2
    
    #    - name: build
    #  run: |
      #    ./gradlew :app:assembleDebug  :app:assembleDebugAndroidTest

    - name: create AVD
      run: |
        export API=`echo ${{matrix.api}}|cut -f 2 -d'-'`
        if [ $API == 28 ]
        then
          export PACKAGE="system-images;android-${API};google_apis;x86"
          export ABI="google_apis/x86"
        else
          export PACKAGE="system-images;android-${API};google_apis;x86_64"
          export ABI="google_apis/x86_64"
        fi

        export EMULATOR_NAME="${EMULATOR}_API${API}"
        echo y | $ANDROID_HOME/tools/bin/sdkmanager --install $PACKAGE
        echo no | "$ANDROID_HOME/tools/bin/avdmanager" create avd -n TestAvd -d pixel_xl --abi $ABI --package $PACKAGE --force
        echo "AVD created:"
        "$ANDROID_HOME/emulator/emulator" -list-avds

    - name: accel check
      run: |
        "$ANDROID_HOME/emulator/emulator" -accel-check

    - name: modify config.ini
      run: |
        echo 'config.ini'
        cat ~/.android/avd/TestAvd.avd/config.ini

    - name: run emulator
      run: |
        set +e
        nohup "$ANDROID_HOME/emulator/emulator" -avd TestAvd -no-snapshot -no-window -no-audio -no-boot-anim -accel on -wipe-data 2>&1 &
        
        echo "Waiting for device..."
        $ANDROID_HOME/platform-tools/adb wait-for-device shell true
        echo "Android is booting..."
        
        EMU_BOOTED=0
        n=0
        while [[ $EMU_BOOTED = 0 ]];do
            echo "Test for current focus"
            #        $ANDROID_HOME/platform-tools/adb shell dumpsys window
            CURRENT_FOCUS=`$ANDROID_HOME/platform-tools/adb shell dumpsys window 2>/dev/null | grep -i mCurrentFocus`
            echo "Current focus: ${CURRENT_FOCUS}"

            case $CURRENT_FOCUS in
            *"Launcher"*)
              echo "Launcher is ready, Android boot completed"
              EMU_BOOTED=1
            ;;
            *"Not Responding"*)
              echo "Dismiss System UI isn't responding alert"
              adb shell input keyevent KEYCODE_DPAD_DOWN
              adb shell input keyevent KEYCODE_DPAD_DOWN
              adb shell input keyevent KEYCODE_ENTER
            ;;
            *)
              n=$((n + 1))
              echo "Waiting Android to boot 10 sec ($n)..."
              sleep 10
              if [ $n -gt 30 ]; then
                  echo "Android Emulator does not start in 5 minutes"
                  exit 2
              fi
            ;;
            esac
        done
        echo "Android Emulator started."

    - name: access emulator with adb
      run: |
        "$ANDROID_HOME/platform-tools/adb" shell ls || true

    - name: show emulator log
      run: |
        test -f nohup.out && cat nohup.out || echo 'no nohup.out'

#    - name: install apk
#      run: |
  #        $ANDROID_HOME/platform-tools/adb install app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
  #      $ANDROID_HOME/platform-tools/adb install app/build/outputs/apk/debug/app-debug.apk

    - name: run test
      continue-on-error: true
      run: |
        if test -s /tmp/failed; then 
          echo "Skip"
        else
          ./gradlew connectedAndroidTest
        fi
        #$ANDROID_HOME/platform-tools/adb shell am instrument -w -m -e debug false -e class 'vsedoli.espressodemo.ExampleInstrumentedTest' vsedoli.espressodemo.test/androidx.test.runner.AndroidJUnitRunner

    - name: grab screen
      run: |
        $ANDROID_HOME/platform-tools/adb exec-out screencap -p > screen.png

    - uses: actions/upload-artifact@v2
      with:
        name: screen-${{matrix.api}}.png
        path: screen.png
