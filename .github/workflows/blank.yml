# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, workflow_dispatch]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    strategy:
     matrix:
       api: [28, 29, 30, 30, 30]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    #    - name: build
    #  run: |
      #    ./gradlew :app:assembleDebug  :app:assembleDebugAndroidTest

    - name: create AVD
      run: |
        export API=${{matrix.api}}
        if [ $API == 28 ]
        then
          export PACKAGE="system-images;android-${API};google_apis;x86"
          export ABI="google_apis/x86"
        else
          export PACKAGE="system-images;android-${API};google_apis;x86_64"
          export ABI="google_apis/x86_64"
        fi

        export EMULATOR_NAME="${EMULATOR}_API${API}"
        #echo y | "$ANDROID_HOME/tools/bin/sdkmanager" "system-images;android-${SDK_PLATFORM};google_apis;x86"
        #echo no | "$ANDROID_HOME/tools/bin/avdmanager" create avd -n TestAvd -k "system-images;android-${SDK_PLATFORM};google_apis;x86"
        echo y | $ANDROID_HOME/tools/bin/sdkmanager --install $PACKAGE
        echo no | "$ANDROID_HOME/tools/bin/avdmanager" create avd -n TestAvd -d pixel_xl --abi $ABI --package $PACKAGE --force
        echo "AVD created:"
        "$ANDROID_HOME/emulator/emulator" -list-avds

    - name: modify config.ini
      run: |
        echo 'config.ini'
        cat ~/.android/avd/TestAvd.avd/config.ini
        #sed  -ibak -e '/^hw.mainKeys/d'  ~/.android/avd/TestAvd.avd/config.ini
        #echo 'hw.mainKeys=true' >> ~/.android/avd/TestAvd.avd/config.ini
        #echo 'disk.dataPartition.size=2048MB' >> ~/.android/avd/TestAvd.avd/config.ini
        echo 'hw.ramSize=1024MB' >> ~/.android/avd/TestAvd.avd/config.ini
        echo '== config.ini modified'
        cat ~/.android/avd/TestAvd.avd/config.ini

    - name: run emulator
      continue-on-error: true
      run: |
        nohup "$ANDROID_HOME/emulator/emulator" -avd TestAvd -no-snapshot -no-window -no-audio -no-boot-anim -accel on -wipe-data 2>&1 &
        EMU_BOOTED='unknown'
        n=0
        
        echo "Waiting for device 45 sec..."
        sleep 45
        
        while
            echo "Waiting android to boot 10 sec..."
            sleep 10
            EMU_BOOTED=`adb shell 'getprop sys.boot_completed'`
            echo "getprop sys.boot_complete=$EMU_BOOTED"
            n=$((n + 1))
            if [ $n -gt 30 ]; then
                echo "Android Emulator does not start in 5 minutes"
                echo "failed" > /tmp/failed
                exit 2
            fi
           [[ ${EMU_BOOTED} != *"1"* ]]
           do :
        done
        echo "Android Emulator started."
        
        echo "Access emulator with adb"
        
        "$ANDROID_HOME/platform-tools/adb" shell ls || true

#    - name: install apk
#      run: |
  #        $ANDROID_HOME/platform-tools/adb install app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
  #      $ANDROID_HOME/platform-tools/adb install app/build/outputs/apk/debug/app-debug.apk

    - name: run test
      continue-on-error: true
      run: |
        if test -s /tmp/failed; then 
          echo "Skip"
        else
          ./gradlew connectedAndroidTest
        fi
        #$ANDROID_HOME/platform-tools/adb shell am instrument -w -m -e debug false -e class 'vsedoli.espressodemo.ExampleInstrumentedTest' vsedoli.espressodemo.test/androidx.test.runner.AndroidJUnitRunner

    - name: grab screen
      run: |
        $ANDROID_HOME/platform-tools/adb exec-out screencap -p > screen.png

    - uses: actions/upload-artifact@v2
      with:
        name: screen.png
        path: screen.png
